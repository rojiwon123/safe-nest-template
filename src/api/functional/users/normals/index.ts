/**
 * @packageDocumentation
 * @module api.functional.users.normals
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../../utils/NestiaSimulator";
import type { INormal } from "./../../../structures/user/INornal";

/**
 * 일반 사용자 공개 프로필 정보 요청 API
 * 
 * @summary 일반 사용자 공개 프로필 정보 요청
 * @tag normals
 * @param normal_id 사용자 id
 * @return 일반 사용자 공개 정보
 * 
 * @controller UsersNormalsController.getOne()
 * @path GET /users/normals/:normal_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getOne(
    connection: IConnection,
    normal_id: string,
): Promise<getOne.Output> {
    return !!connection.simulate
        ? getOne.simulate(
              connection,
              normal_id,
          )
        : Fetcher.fetch(
              connection,
              getOne.ENCRYPTED,
              getOne.METHOD,
              getOne.path(normal_id),
          );
}
export namespace getOne {
    export type Output = INormal.IPublicProfile;

    export const METHOD = "GET" as const;
    export const PATH: string = "/users/normals/:normal_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (normal_id: string): string => {
        return `/users/normals/${encodeURIComponent(normal_id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        normal_id: string,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path(normal_id)
        });
        assert.param("normal_id")("string")(() => typia.assert(normal_id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}