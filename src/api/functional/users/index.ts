/**
 * @packageDocumentation
 * @module api.functional.users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../utils/NestiaSimulator";
import type { IUser } from "./../../structures/user/user";

/**
 * this is sample api
 * @summary user find by user id
 * @tag users
 * @param user_id user id
 * @return user info
 * @throw 404 Not Found
 * 
 * @controller UsersController.getOne()
 * @path GET /users/:user_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getOne(
    connection: IConnection,
    user_id: string,
): Promise<getOne.Output> {
    return !!connection.simulate
        ? getOne.simulate(
              connection,
              user_id,
          )
        : Fetcher.fetch(
              connection,
              getOne.ENCRYPTED,
              getOne.METHOD,
              getOne.path(user_id),
          );
}
export namespace getOne {
    export type Output = IUser;

    export const METHOD = "GET" as const;
    export const PATH: string = "/users/:user_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (user_id: string): string => {
        return `/users/${encodeURIComponent(user_id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        user_id: string,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path(user_id)
        });
        assert.param("user_id")("string")(() => typia.assert(user_id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * @controller UsersController.test()
 * @path GET /users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function test(
    connection: IConnection,
): Promise<test.Output> {
    return !!connection.simulate
        ? test.simulate(
              connection,
          )
        : Fetcher.fetch(
              connection,
              test.ENCRYPTED,
              test.METHOD,
              test.path(),
          );
}
export namespace test {
    export type Output = false | true;

    export const METHOD = "GET" as const;
    export const PATH: string = "/users";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/users`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}