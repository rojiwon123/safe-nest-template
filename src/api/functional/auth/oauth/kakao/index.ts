/**
 * @packageDocumentation
 * @module api.functional.auth.oauth.kakao
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

/**
 * 카카오 인증 로그인 페이지 주소 요청
 * 
 * @summary 카카오 인증 페이지 주소 요청
 * @tag authentication
 * @return 카카오 인증 페이지 주소
 * 
 * @controller AuthController.getKakaoLoginUrl()
 * @path GET /auth/oauth/kakao
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getKakaoLoginUrl(
    connection: IConnection,
): Promise<getKakaoLoginUrl.Output> {
    return !!connection.simulate
        ? getKakaoLoginUrl.simulate(
              connection,
          )
        : Fetcher.fetch(
              connection,
              getKakaoLoginUrl.ENCRYPTED,
              getKakaoLoginUrl.METHOD,
              getKakaoLoginUrl.path(),
          );
}
export namespace getKakaoLoginUrl {
    export type Output = string;

    export const METHOD = "GET" as const;
    export const PATH: string = "/auth/oauth/kakao";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/auth/oauth/kakao`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}