# https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services

name: Release 🔖

on:
    push:
        branches: [release]

permissions:
    id-token: write
    contents: write
    packages: read

env:
    DATABASE_URL: postgresql://test:test@localhost:5432/test

jobs:
    test:
        runs-on: ubuntu-latest
        if: startsWith(github.event.head_commit.message, '🔖')
        services:
            postgres:
                image: postgres:14
                env:
                    POSTGRES_USER: test
                    POSTGRES_PASSWORD: test
                    POSTGRES_DB: test
                options: >-
                    --health-cmd="pg_isready"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432
        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: Setup NodeJS
              uses: actions/setup-node@main
              with:
                  node-version: 18

            - name: Setup Registry
              run: |
                  echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
                  echo "@rojiwon123:registry=https://npm.pkg.github.com" >> ~/.npmrc

            - name: Install
              run: npm ci && npm run build:prisma && npm run build:sdk

            - name: Setup DB
              run: npm run db:deploy

            - name: Test 🧪
              run: npm run test

    update_swagger:
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: Setup NodeJS
              uses: actions/setup-node@main
              with:
                  node-version: 18

            - name: Setup Registry
              run: |
                  echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
                  echo "@rojiwon123:registry=https://npm.pkg.github.com" >> ~/.npmrc

            - name: Install & Build
              run: npm ci && npm run build:prisma && npm run build:swagger

            - name: Copy swagger.json to gh-pages
              run: |
                  git config --global user.email "github-actions@github.com"
                  git config --global user.name "GitHub Actions"
                  git fetch origin gh-pages:gh-pages
                  git add .
                  git commit -m "temp commit"
                  git switch gh-pages
                  mv ./packages/api/swagger/swagger.json ./swagger.json
                  git add ./swagger.json
                  git commit -m "Update swagger.json"
                  git push --set-upstream origin gh-pages

    build_and_push_image:
        runs-on: ubuntu-latest
        needs: test
        if: false
        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: Configure AWS credentials 🔒
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR 🔒
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Read Release Version 🔖
              id: read-version
              run: |
                  echo VERSION=$(node -p "require('./package.json').version") >> $GITHUB_OUTPUT

            - name: Image Build and Push to Amazon ECR ✨
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ steps.read-version.outputs.VERSION }}
              run: |
                  docker build --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    release_tag:
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: Read Release Version 🔖
              id: read-version
              run: echo VERSION=$(node -p "require('./package.json').version") >> $GITHUB_OUTPUT

            - name: Generate Release Note
              run: git log -1 --pretty=format:"%b" > release_note.md

            - name: create tag
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  git config --global user.email "github-actions@github.com"
                  git config --global user.name "GitHub Actions"
                  version="v${{ steps.read-version.outputs.VERSION }}"
                  git tag -a "$version" -m "$version"
                  git push origin "$version"
                  gh release create "$version" -t "$version" --target "${{ github.sha }}" -F release_note.md
