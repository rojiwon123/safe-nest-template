name: Release üîñ

on:
    workflow_dispatch:
        inputs:
            suffix:
                description: 'Suffix to Append to Tag Names'
                required: false
                type: string

permissions:
    id-token: write
    contents: write
    packages: read
    pages: write

env:
    DATABASE_URL: postgresql://test:test@localhost:5432/test
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
    group: ${{ github.workflow }}
    cancel-in-progress: true

jobs:
    test:
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:14
                env:
                    POSTGRES_USER: test
                    POSTGRES_PASSWORD: test
                    POSTGRES_DB: test
                options: >-
                    --health-cmd="pg_isready"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432
        steps:
            - name: Checkout üõéÔ∏è
              uses: actions/checkout@main

            - name: Setup NodeJS
              uses: actions/setup-node@main
              with:
                  node-version: 20

            - name: Install
              run: npm ci && npm run build:prisma && npm run build:sdk

            - name: Setup DB
              run: npm run db:deploy

            - name: Test üß™
              run: npm run test

    create-release-note:
        runs-on: ubuntu-latest
        needs: test

        outputs:
            release: ${{ steps.tag-name.outputs.TAG_NAME }}

        steps:
            - name: Checkout üõéÔ∏è
              uses: actions/checkout@main

            - name: Generate Release Tag üîß
              id: tag-name
              run: |
                  VERSION=$(node -p "require('./package.json').version")
                  if [ -n "${{ github.event.inputs.suffix }}" ]; then
                    tag_name="v${VERSION}-${{ github.event.inputs.suffix }}"
                  else
                    tag_name="v${VERSION}"
                  fi
                    echo "TAG_NAME=$tag_name" >> $GITHUB_OUTPUT
              shell: bash

            - name: Create Release Note üîñ
              run: |
                  git config --global user.email "github-actions@github.com"
                  git config --global user.name "GitHub Actions"
                  git tag -a "${{ steps.tag-name.outputs.TAG_NAME }}" -m "${{ steps.tag-name.outputs.TAG_NAME }}"
                  git push origin "${{ steps.tag-name.outputs.TAG_NAME }}"
                  gh release create "${{ steps.tag-name.outputs.TAG_NAME }}" -t "${{ steps.tag-name.outputs.TAG_NAME }}" --target "${{ github.sha }}" --generate-notes

    build-swagger:
        runs-on: ubuntu-latest
        needs: create-release-note
        steps:
            - name: Checkout üõéÔ∏è
              uses: actions/checkout@main

            - name: Setup NodeJS
              uses: actions/setup-node@main
              with:
                  node-version: 20

            - name: Setup Pages
              uses: actions/configure-pages@v5

            - name: Swagger Build
              run: npm ci && npm run build:prisma && npm run build:swagger

            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./packages/swagger

    deploy-swagger:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        needs: build-swagger
        steps:
            - name: Deploy to Github Pages
              id: deployment
              uses: actions/deploy-pages@v4
#
#    deploy-image:
#        runs-on: ubuntu-latest
#        needs: create-release-note
#        steps:
#            - name: Checkout üõéÔ∏è
#              uses: actions/checkout@main
#
#            - name: Configure AWS credentials üîí
#              uses: aws-actions/configure-aws-credentials@v2
#              with:
#                  role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
#                  aws-region: ${{ env.AWS_REGION }}
#
#            - name: Login to Amazon ECR üîí
#              id: login-ecr
#              uses: aws-actions/amazon-ecr-login@v1
#
#            - name: Image Build and Push to Amazon ECR ‚ú®
#              id: build-image
#              env:
#                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#                  IMAGE_TAG: ${{ needs.create-release-note.outputs.release }}
#              run: |
#                  docker build --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
