name: Release 🔖

on:
    workflow_dispatch:
        inputs:
            deployment:
                required: true
                default: false
                type: boolean
            documentation:
                required: true
                default: false
                type: boolean

permissions:
    id-token: write
    contents: write
    packages: write

env:
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
    group: release
    cancel-in-progress: false

jobs:
    test:
        if: startsWith(github.ref, 'refs/heads/main')
        uses: ./.github/workflows/test.yml

    deployment:
        needs: test
        if: ${{ inputs.deployment }}
        runs-on: ubuntu-latest

        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: Get Version
              id: release
              run: echo "version=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"

            - name: Setup NodeJS
              uses: actions/setup-node@main
              with:
                  node-version: 20
                  registry-url: https://npm.pkg.github.com/
                  scope: "@rojiwon123"

            - name: Configure AWS credentials 🔑
              uses: aws-actions/configure-aws-credentials@main
              with:
                  role-to-assume: ${{ vars.AWS_ASSUME_ROLE_ARN }}
                  aws-region: ${{ vars.AWS_REGION }}

            - name: Login to ECR
              id: ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Setup ECR Repository
              uses: deploy-actions/setup-ecr@v1
              with:
                  RepositoryName: ${{ vars.PROJECT_NAME }}
                  ImageTagMutability: IMMUTABLE

            - name: Image Tag
              id: image
              run: echo "tag=${{ steps.ecr.outputs.registry }}/${{ vars.PROJECT_NAME }}:${{ steps.release.outputs.version }}" >> "$GITHUB_OUTPUT"

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            # Builder Stage Caching Step
            - name: Docker Build Builder Stage
              uses: docker/build-push-action@v6
              with:
                  load: true
                  target: builder
                  cache-from: type=gha, ref=main
                  cache-to: type=gha, ref=main, mode=max

            - name: Docker Build Runner Stage
              uses: docker/build-push-action@v6
              with:
                  load: true
                  tags: ${{ steps.image.outputs.tag }}
                  cache-from: type=gha, ref=main

            - name: Push to ECR
              id: target
              run: |
                  docker push ${{ steps.image.outputs.tag }}
                  echo "digest=$(docker inspect --format '{{index .RepoDigests 0}}' ${{ steps.image.outputs.tag }})" >> "$GITHUB_OUTPUT"

            - name: Deploy Lambda
              uses: deploy-actions/lambda-api@v1
              with:
                  Name: ${{ vars.PROJECT_NAME }}
                  ImageUri: ${{ steps.target.outputs.digest }}
                  MemorySize: 1024
                  Timeout: 10
                  Environment: |
                      Variables:
                          NODE_ENV: production

    documentation:
        needs: test
        if: ${{ inputs.documentation }}
        runs-on: ubuntu-latest

        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: Generate Release Note
              id: release
              run: |
                  VERSION=$(node -p "require('./package.json').version")
                  TAG=v$VERSION

                  git config --global user.email "github-actions@github.com"
                  git config --global user.name "GitHub Actions"
                  git tag -a "$TAG" -m "release $TAG"
                  git push origin "$TAG"
                  gh release create "$TAG" -t "$TAG" --target "${{ github.sha }}" --generate-notes

                  echo "version=VERSION" >> "$GITHUB_OUTPUT"

            - name: Setup NodeJS
              uses: actions/setup-node@main
              with:
                  node-version: 20
                  registry-url: https://npm.pkg.github.com/
                  scope: "@rojiwon123"

            - name: Configure AWS credentials 🔑
              uses: aws-actions/configure-aws-credentials@main
              with:
                  role-to-assume: ${{ vars.AWS_ASSUME_ROLE_ARN }}
                  aws-region: ${{ vars.AWS_REGION }}

            - name: Build Doc & SDK
              run: npm ci && npm run build:nestia

            - name: Setup Page
              id: spa
              uses: deploy-actions/s3-spa@v1
              with:
                  BucketName: ${{ vars.S3 }}

            - name: Deploy Doc
              run: |
                  aws s3 cp --recursive "./packages/doc" s3://${{ vars.S3 }}
                  aws s3 cp "./packages/doc/openapi.json" s3://${{ vars.S3 }}/version/${{ steps.release.outputs.version }}.json
                  aws cloudfront create-invalidation --distribution-id ${{ steps.spa.outputs.DistributionId }} --paths "/openapi.json"

            - name: Publish SDK
              run: npm publish ./packages/sdk --access restricted

            - name: Show URL of SPA
              run: echo "https://${{ steps.spa.outputs.DomainName }}"
