name: Release 🔖

on:
    workflow_dispatch:
        inputs:
            version:
                required: false
                type: string
            image:
                required: true
                default: false
                type: boolean
            swagger:
                required: true
                default: false
                type: boolean
            sdk:
                required: true
                default: false
                type: boolean

permissions:
    id-token: write
    contents: write
    packages: write
    pages: write

env:
    DATABASE_URL: postgresql://test:test@localhost:5432/test
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
    check-version:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: tag check
              run: |
                  VERSION=${{ github.event.inputs.version }}
                  if git rev-parse "$VERSION" >/dev/null 2>&1; then
                    echo "Tag $VERSION already exist."
                    exit 1
                  fi
              shell: bash

    test:
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:14
                env:
                    POSTGRES_USER: test
                    POSTGRES_PASSWORD: test
                    POSTGRES_DB: test
                options: >-
                    --health-cmd="pg_isready"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432
        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: Setup NodeJS
              uses: actions/setup-node@main
              with:
                  node-version: 20

            - name: Install & Build
              run: npm ci && npm run build:sdk

            - name: Setup DB
              run: npm run db:deploy

            - name: Test 🧪
              run: npm run test

    update-version:
        needs:
            - check-version
            - test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: Setup NodeJS
              uses: actions/setup-node@main
              with:
                  node-version: 20

            - name: Install
              run: npm ci

            - name: Git Config
              run: |
                  git config --global user.email "github-actions@github.com"
                  git config --global user.name "GitHub Actions"

            - name: Update Version
              run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

            - name: Git Commit
              run: |
                  git add .
                  git commit -m "chore: update version ${{ github.event.inputs.version }}"

            - name: Generate Tag
              run: git tag v${{ github.event.inputs.version }}

            - name: Release Version 🔧
              run: git push --follow-tags

    release-note:
        needs: update-version
        runs-on: ubuntu-latest
        concurrency:
            group: ${{ github.workflow }}-release-note
            cancel-in-progress: true

        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: Create Release Note 🔖
              run: |
                  git config --global user.email "github-actions@github.com"
                  git config --global user.name "GitHub Actions"
                  gh release create v"${{ github.event.inputs.version }}" -t v"${{ github.event.inputs.version }}" --target "${{ github.sha }}" --generate-notes

    swagger:
        needs: update-version
        if: github.event.inputs.swagger == 'true'
        runs-on: ubuntu-latest
        concurrency:
            group: ${{ github.workflow }}-swagger
            cancel-in-progress: true

        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: Setup NodeJS
              uses: actions/setup-node@main
              with:
                  node-version: 20

            - name: Setup Pages
              uses: actions/configure-pages@v5

            - name: Swagger Build
              run: npm ci && npm run build:swagger

            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./packages/swagger
                  name: github-pages

            - name: Deploy to Github Pages
              uses: actions/deploy-pages@v4

    sdk:
        needs: update-version
        if: github.event.inputs.sdk == 'true'
        runs-on: ubuntu-latest
        concurrency:
            group: ${{ github.workflow }}-${{ github.event.inputs.version }}-sdk
            cancel-in-progress: true

        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@main

            - name: Setup NodeJS
              uses: actions/setup-node@main
              with:
                  node-version: 20
                  registry-url: https://npm.pkg.github.com/
                  scope: '@rojiwon123'

            - name: Swagger Build
              run: npm ci && npm run build:sdk

            - name: Publish
              run: npm publish ./packages/api --access restricted
#
#    deploy-image:
#        runs-on: ubuntu-latest
#        needs: create-release-note
#        steps:
#            - name: Checkout 🛎️
#              uses: actions/checkout@main
#
#            - name: Configure AWS credentials 🔒
#              uses: aws-actions/configure-aws-credentials@v2
#              with:
#                  role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
#                  aws-region: ${{ env.AWS_REGION }}
#
#            - name: Login to Amazon ECR 🔒
#              id: login-ecr
#              uses: aws-actions/amazon-ecr-login@v1
#
#            - name: Image Build and Push to Amazon ECR ✨
#              id: build-image
#              env:
#                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#                  IMAGE_TAG: ${{ needs.create-release-note.outputs.release }}
#              run: |
#                  docker build --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
